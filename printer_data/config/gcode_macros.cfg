#[include gcode_spool_macros.cfg]

[gcode_macro START_PRINT]
gcode:

    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}

    SET_LED LED=printer_led WHITE=0.5 ; Switch on the light

    # Start bed heating
    M140 S{BED_TEMP}
    ; Prep surfaces before auto home for better accuracy
    M104 S{EXTRUDER_TEMP}
    M109 S{EXTRUDER_TEMP}

    ; M413 S0 ; Disable power loss recovery
    G92 E0 ; Reset Extruder

    G28 ; Home all axes
    G1 Z10.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X0 Y0

    # Switch On PSU fan
    SET_FAN_SPEED FAN=psu_fan SPEED=1

    # Wait for bed to reach temperature
    M190 S{BED_TEMP}

    BED_MESH_PROFILE LOAD=default

    G1 X0.1 Y20 Z0.3 F5000.0 ; Move to start position
    G1 X0.1 Y100.0 Z0.3 F1500.0 E15 ; Draw the first line
    G1 X0.4 Y100.0 Z0.3 F5000.0 ; Move to side a little
    G1 X0.4 Y20 Z0.3 F1500.0 E30 ; Draw the second line
    G92 E0 ; Reset Extruder
    G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X1 Y20 Z0.3 F5000.0 ; Move over to prevent blob squish

[gcode_macro END_PRINT]
gcode:
    {% set MAX_Y = params.MAX_Y|default(200)|float %}
    G91 ;Relative positioning
    G1 E-2 F2700 ;Retract a bit
    G1 E-2 Z0.2 F2400 ;Retract and raise Z
    G1 X5 Y5 F3000 ;Wipe out
    G1 Z10 ;Raise Z more
    G90 ;Absolute positioning

    G1 X0 Y{MAX_Y} ;Present print
    M106 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed

    M84 X Y E ;Disable all steppers but Z

    SET_LED LED=printer_led WHITE=0.0 ; Switch off the light

    # Switch Off PSU fan
    SET_FAN_SPEED FAN=psu_fan SPEED=0
    
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30 ; wait for temp to reach lower values and shutdown printer
    

[gcode_macro QUERY_AMBIENT_AIR]
gcode:
    {% set sensor = printer["bme280 ambient_air"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}


[gcode_macro _POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method(
    "set_device_power", device="WallPlug", state="off"
  )}

[delayed_gcode POWER_OFF_PRINTER_CHECK]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    {% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 50.0 %}
        {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            _POWER_OFF_PRINTER
        {% else %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
        {% endif %}
    {% else %}
        {% if printer.idle_timeout.state == "Printing" %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
        {% else %}
            {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
            {% else %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            {% endif %}
        {% endif %}
    {% endif %}
  {% endif %}

# Copyright (C) 2022 Justin Schuh <code@justinschuh.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.

[gcode_macro _load_unload]
gcode:
  {% set saved_extruder = printer.toolhead.extruder %}
  {% set EXTRUDER = params.EXTRUDER|default(saved_extruder)|lower %}
  {% set km = printer["gcode_macro _km_globals"] %}
  # Use the global min as default if provided, else use per extruder min + 5.
  {% set default_minimum = km.load_min_temp if km.load_min_temp else
         (printer.configfile.settings[EXTRUDER].min_extrude_temp + 5) %}
  {% if 'MINIMUM' in params %}
    {% set MINIMUM = params.MINIMUM|int %}
  # This is the special case for a filament change after an idle timeout.
  {% elif printer.pause_resume.is_paused and printer[EXTRUDER].target == 0 and
          printer["gcode_macro resume"].saved_extruder_temp %}
    {% set MINIMUM = printer["gcode_macro resume"].saved_extruder_temp %}
  # Use the target temp if higher than the default.
  {% elif printer[EXTRUDER].target > default_minimum %}
    {% set MINIMUM = printer[EXTRUDER].target %}
  {% else %}
    {% set MINIMUM = default_minimum %}
  {% endif %}
  {% if MINIMUM < printer.configfile.settings[EXTRUDER].min_extrude_temp %}
    { action_raise_error("Extrude below minimum temp.") }
  {% elif printer.pause_resume.is_paused %}
    # Clear the saved E if we're (un-)loading while paused.
    SET_GCODE_VARIABLE MACRO=resume VARIABLE=saved_e VALUE="{0.0}"
  {% endif %}
  {% set SPEED = params.SPEED|default(km.load_speed)|int %}
  {% set priming_length = km.load_priming_length %}
  {% set LENGTH = params.LENGTH|default(km.load_length)|float - priming_length%}
  {% if LENGTH < 0 %}
    {% set priming_length = (priming_length + LENGTH, 0)|max %}
    {% set LENGTH = 0 %}
  {% endif %}
  SAVE_GCODE_STATE NAME=_KM_LOAD_UNLOAD
  {% if EXTRUDER != saved_extruder%}
    ACTIVATE_EXTRUDER EXTRUDER={EXTRUDER}
  {% endif %}
  _KM_PRINT_STATUS ACTION=PUSH_STATUS
  {% if not printer.extruder.can_extrude or
        printer[EXTRUDER].target < default_minimum %}
    {action_respond_info("Preheating %s to %d" | format(EXTRUDER, MINIMUM))}
    M109 S{MINIMUM}
  {% endif %}
  _KM_PRINT_STATUS ACTION=CHANGE STATUS={"filament_load"
    if params.LOAD|int else "filament_unload"}
  M83
  {% set priming_speed = (km.load_priming_speed, SPEED)|min %}
  {% if params.LOAD|int %}
    G0 E{LENGTH} F{SPEED}
    G0 E{priming_length} F{priming_speed}
    G0 E{'%.4f' % -printer["gcode_macro resume"].saved_e} F{km.load_speed}
  {% else %}
    {% set pre_prime_distance = 5.0 %}
    {% set shaping_moves = 5 %}
    {% set shaping_distance = (shaping_moves * (1 + shaping_moves)/20) %}
    # Push forward to heat up, then retract to the edge of the meltzone.
    G0 E{pre_prime_distance} F{SPEED}
    G4 P500
    G0 E{'%.4f' % -(priming_length - shaping_distance)} F{SPEED}
    # Shape the tip with a pairs of short extrusions and retractions, where
    # the retractions get increasingly longer than the extrusion.
    {% for i in range(1, shaping_moves + 1) %}
      G0 E2 F{priming_speed}
      G0 E-{2 + (0.1 * i)} F{priming_speed}
    {% endfor %}
    # Retract the rest of the length.
    G0 E{'%.4f' % -(LENGTH + pre_prime_distance)} F{SPEED}
  {% endif %}
  RESTORE_GCODE_STATE NAME=_KM_LOAD_UNLOAD

  # Beep on completion
  _KM_BEEP_IF_AVAILABLE BEEPS={params.BEEPS|default(8)}
  _KM_PRINT_STATUS ACTION=CHANGE STATUS=pop_status

# TODO: Fix casing after front-ends get fixed
[gcode_macro LOAD_FILAMENT]
description: Loads filament to the extruder.
  Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
                       [EXTRUDER=<extruder>] [MINIMUM=<temperature>]
                       [BEEPS=<beep count on completion>]
gcode:
  _LOAD_UNLOAD LOAD=1{% for k in params
    %}{' '~k~'="'~params[k]~'"'}{% endfor %}

  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  M109
  {% set dummy = params.LENGTH|default(variable_load_length)|float %}
  {% set dummy = params.SPEED|default(variable_load_speed)|float %}
  {% set dummy = params.EXTRUDER|default(current extruder) %}
  {% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
  {% set dummy = params.BEEPS|default(10)|int %}
  " %} # End argument block for Mainsail

# TODO: Fix casing after front-ends get fixed
[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from the extruder.
  Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
                         [EXTRUDER=<extruder>] [MINIMUM=<temperature>]
                         [BEEPS=<beep count on completion>]
gcode:
  _LOAD_UNLOAD LOAD=0{% for k in params
    %}{' '~k~'="'~params[k]~'"'}{% endfor %}

  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  M109
  {% set dummy = params.LENGTH|default(variable_load_length)|float %}
  {% set dummy = params.SPEED|default(variable_load_speed)|float %}
  {% set dummy = params.EXTRUDER|default(default extruder) %}
  {% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
  {% set dummy = params.BEEPS|default(10)|int %}
  " %} # End argument block for Mainsail